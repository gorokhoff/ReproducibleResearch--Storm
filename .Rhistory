unzip("repdata-data-StormData.csv.bz2")
ds<-read.csv("repdata-data-StormData.csv")
head(20)
head(ds)
View(ds)
Total_steps_day <- aggregate(ds$PROPDMG, by=list(ds$EVTYPE), FUN=sum, na.rm = TRUE)
View(Total_steps_day)
colSums(is.na(ds))
colSums(is.na(ds$COUNTYENDN))
library(dplyr)
install.packages("dplyr")
install.packages("plyr")
dir("./")
ls()
na.omit(ds)
ymd <- ymd(ds$BGN_DATE)
??ymd
library(lubridate)
ymd <- ymd(ds$BGN_DATE)
remove(ymd)
?gsub
dsm<-ds[, c("EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
unique(dsm$PROPDMGEXP)
dim(unique(dsm$PROPDMGEXP))
unq<-unique(dsm$PROPDMGEXP)
unq
dim(unq)
View(dsm)
dsm$PROPEXP[dsm$PROPDMGEXP == "K"] <- 1000
factor
factor(dsm$PROPDMGEXP)
levels(dsm$PROPDMGEXP)
dsm$PROPEXP[dsm$PROPDMGEXP == "M"] <- 1e+06
dsm$PROPEXP[dsm$PROPDMGEXP == ""] <- 1
dsm$PROPEXP[dsm$PROPDMGEXP == "B"] <- 1e+09
dsm$PROPEXP[dsm$PROPDMGEXP == "m"] <- 1e+06
dsm$PROPEXP[dsm$PROPDMGEXP == "0"] <- 1
dsm$PROPEXP[dsm$PROPDMGEXP == "5"] <- 1e+05
dsm$PROPEXP[dsm$PROPDMGEXP == "6"] <- 1e+06
dsm$PROPEXP[dsm$PROPDMGEXP == "4"] <- 10000
dsm$PROPEXP[dsm$PROPDMGEXP == "2"] <- 100
dsm$PROPEXP[dsm$PROPDMGEXP == "3"] <- 1000
dsm$PROPEXP[dsm$PROPDMGEXP == "h"] <- 100
dsm$PROPEXP[dsm$PROPDMGEXP == "7"] <- 1e+07
dsm$PROPEXP[dsm$PROPDMGEXP == "H"] <- 100
dsm$PROPEXP[dsm$PROPDMGEXP == "1"] <- 10
dsm$PROPEXP[dsm$PROPDMGEXP == "8"] <- 1e+08
# give 0 to invalid exponent data, so they not count in
dsm$PROPEXP[dsm$PROPDMGEXP == "+"] <- 0
dsm$PROPEXP[dsm$PROPDMGEXP == "-"] <- 0
dsm$PROPEXP[dsm$PROPDMGEXP == "?"] <- 0
levels(dsm$PROPDMGEXP)
dsm$PROPDMGVAL <- dsm$PROPDMG * dsm$PROPEXP
dsm$PROPEXP[dsm$PROPDMGEXP == "k"] <- 1000
source('D:/GitHub/ReproducibleResearch--Storm/Storm.R')
?qplot
??qplot
library(ggplot2)
plot1<-qplot(EVTYPE, data=dsm, weight = PROPDMGVAL, "bar")
plot1
plot1<-qplot(EVTYPE, data=dsm, weight = PROPDMGVAL, geom="bar", bandwidth = 1)
plot1
remove(plot1)
remove(unq)
prdmg<-aggregate(PROPDMGVAL ~ EVTYPE, data = dms, FUN = sum)
cropdmg<-aggregate(CROPDMGVAL ~ EVTYPE, data = dms, FUN = sum)
prdmg<-aggregate(PROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
cropdmg<-aggregate(CROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
source('D:/GitHub/ReproducibleResearch--Storm/Storm.R')
View(prdmg)
?toupper
upper<-toupper(dsm$EVTYPE)
dsm$EVTYPE<-toupper(dsm$EVTYPE)
dsm$EVTYPE<-as.factor(dsm$EVTYPE)
unique(dsm$EVTYPE)
ds[ds$EVTYPE == "HIGH WINDS 58"]
ss<-subset(ds, EVTYPE == "HIGH WINDS 58")
View(prdmg)
View(ss)
ss<-subset(ds, EVTYPE == "SUMMARY OF MARCH 14")
View(ss)
source('D:/GitHub/ReproducibleResearch--Storm/Storm.R')
source('D:/GitHub/ReproducibleResearch--Storm/Storm.R')
unique(dsm$EVTYPE)
ss<-subset(ds, EVTYPE == "Summary of June 15")
View(ss)
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/Storm.R')
dsm$EVTYPE<-toupper(dsm$EVTYPE)
dsm$EVTYPE<-as.factor(dsm$EVTYPE)
prdmg<-aggregate(PROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
cropdmg<-aggregate(CROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
View(prdmg)
?replace
count(unique(dsm$EVTYPE))
dim(unique(dsm$EVTYPE))
unique(dsm$EVTYPE).length
u<-unique(dsm$EVTYPE)
u<-levels(unique(dsm$EVTYPE))
dim(u)
?array
class(u)
?trim
??trim
library(stringi)
dsm$EVTYPE<-toupper(dsm$EVTYPE)
View(dsm)
library(stringi)
dsm$EVTYPE<-stri_trim_both(dsm$EVTYPE)
?stringi-package
?stringi
??stringi
?stri_replace_all
dsm$EVTYPE<-stri_replace_all_fixed(dsm$EVTYPE, "/", " ")
dsm$EVTYPE<-stri_replace_all_fixed(dsm$EVTYPE, "(", "")
dsm$EVTYPE<-stri_replace_all_fixed(dsm$EVTYPE, ")", "")
dsm$EVTYPE<-stri_replace_all_fixed(dsm$EVTYPE, "  "," ")
dsm$EVTYPE<-stri_replace_all_fixed(dsm$EVTYPE, "WINDS", "WIND")
dsm$EVTYPE<-as.factor(dsm$EVTYPE)
prdmg<-aggregate(PROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
View(prdmg)
?subset
prdmgsub<-subset(prdmg, PROPDMGVAL > 0)
View(prdmgsub)
library(stringi)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
dsm$EVTYPE<-stri_trim_both(dsm$EVTYPE)
dsm$EVTYPE<-stri_replace_all(dsm$EVTYPE, "/|\(|\)", " ")
dsm$EVTYPE<-stri_replace_all(dsm$EVTYPE, "/|\\(|\\)", " ")
dsm$EVTYPE<-stri_replace_all(dsm$EVTYPE, regex =  "[/|\\(|\\)]", " ")
View(dsm)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
prdmg$EVTYPE<-stri_replace_all(prdmg$EVTYPE, regex =  "[/|\\(|\\)|\\\]", " ")
prdmg$EVTYPE<-stri_replace_all(prdmg$EVTYPE, regex =  "[/|\\(|\\)|\\]", " ")
prdmg$EVTYPE<-stri_replace_all(prdmg$EVTYPE, regex =  "[/|\\(|\\)|\\\\]", " ")
View(dsm)
View(prdmg)
prdmg$EVTYPE<-stri_replace_all(prdmg$EVTYPE, regex =  "[/|\\(|\\)|\\\\|&]", " ")
View(prdmg)
THUNDERSTORMS
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
View(prdmg)
levels(dsm$EVTYPE)
class(levels(dsm$EVTYPE))
nlevels(dsm$EVTYPE)
nlevels(ds$EVTYPE)
initlevels<-nlevels(dsm$EVTYPE)
?nlevels
prdmg<-subset(prdmg, PROPDMGVAL > 0)
fat<-aggregate(FATALITIES ~ EVTYPE, data = dsm, FUN = sum)
View(fat)
fat<-subset(fat, FATALITIES > 0)
inj<-aggregate(INJURIES ~ EVTYPE, data = dsm, FUN = sum)
inj<-subset(inj, INJURIES > 0)
View(fat)
View(inj)
f1<-fat[order(FATALITIES),]
f1<-fat[order(fat$FATALITIES),]
View(`f1`)
f1<-fat[order(-fat$FATALITIES),]
View(`f1`)
fat<-fat[order(-fat$FATALITIES),]
inj<-inj[order(-inj$INJURIES),]
prdmg<-prdmg[order(-prdmg$PROPDMGVALS),]
cropdmg<-cropdmg[order(-cropdmg$CROPDMGVAL),]
prdmg<-prdmg[order(-prdmg$PROPDMGVAL),]
View(prdmg)
View(cropdmg)
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
cropdmg<-aggregate(CROPDMGVAL ~ EVTYPE, data = dsm, FUN = sum)
cropdmg<-subset(cropdmg, CROPDMGVAL > 0)
cropdmg<-cropdmg[order(-cropdmg$CROPDMGVAL),]
View(cropdmg)
topFat<-fat[1:10,]
View(topFat)
barplot(topFat)
?barplot
barplot(topFat$FATALITIES)
barplot(topFat$FATALITIES, las = 3, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 4, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 2, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 3, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 2, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 1, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 2, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
barplot(topFat$FATALITIES, las = 3, names.arg = topFat$EVTYPE, main = "Weather Events With The Top 10 Highest Fatalities",     ylab = "number of fatalities", col = "red")
?par
file.edit('~/.Rprofile')
source('D:/GitHub/ReproducibleResearch--Storm/CleanData.R')
file.edit('~/.Rprofile')
library('RCurl')
library('rjson')
install.packages("rjson")
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/5m9s2c8y?apikey=0TTNhFdgy9NPSM2beEECBPb2t2Sz32uG&kimpath1=equities&kimpath2=dixy-group_rts-ratios')
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
json <- getURL('https://www.kimonolabs.com/api/5m9s2c8y?apikey=0TTNhFdgy9NPSM2beEECBPb2t2Sz32uG&kimpath1=equities&kimpath2=dixy-group_rts-ratios')
obj <- fromJSON(json)
print(obj)
